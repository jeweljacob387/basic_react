{"version":3,"sources":["logo.svg","FunctionComponent/FunctionComponent.js","toc.js","HelloWorld/HelloWorldComponent.js","ArrayOperations/ArrayOperationsComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SimpleComponent","props","data","name","age","routes","path","linkText","component","React","Component","nameList","this","map","index","key","MapRouteAndLinks","useRouteMatch","url","exact","route","to","RenderComponent","compId","useParams","find","TableOfContents","App","className","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,kC,6MCc3C,SAASC,EAAgBC,GACrB,OACI,6BACI,kDACA,sGACA,2BACI,8BAAOA,EAAMC,KAAKC,MADtB,OACsC,8BAAOF,EAAMC,KAAKE,IAAlB,kBCflD,IAAMC,EAAS,CACX,CACIC,KAAM,aACNC,SAAU,aACVC,U,uKCLA,OAAQ,+C,GAFiCC,IAAMC,YDSnD,CACIJ,KAAM,iBACNC,SAAU,kBACVC,U,4MEXJG,SAAW,CACP,aACA,eACA,cACA,W,uDAIA,OACI,6BACI,+CACA,4BACKC,KAAKD,SAASE,KAAI,SAACV,EAAMW,GAAP,OAAiB,wBAAIC,IAAKD,GAAQX,Y,GAbnBM,IAAMC,YFcxD,CACIJ,KAAM,oBACNC,SAAU,qBACVC,U,4MDhBJN,KAAO,CACHC,KAAM,WACNC,KAAM,I,uDAIN,OAAO,kBAACJ,EAAD,CAAiBE,KAAMU,KAAKV,W,GAPIO,IAAMC,aCqBrD,SAASM,IAAoB,IAAD,EACFC,cAAdX,EADgB,EAChBA,KAAMY,EADU,EACVA,IACd,OAEI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACb,KAAM,QACdD,EAAOQ,KAAI,SAAAO,GAAK,OAAI,kBAAC,IAAD,CAAML,IAAKK,EAAMd,KAAMe,GAAE,UAAKH,EAAL,YAAYE,EAAMd,OAASc,EAAMb,SAAS,kCAE5F,kBAAC,IAAD,CAAOD,KAAI,UAAKA,EAAL,aACP,kBAACgB,EAAD,QAQhB,SAASA,IAAmB,IAClBC,EAAWC,cAAXD,OACN,OACI,kBAAC,IAAD,CAAOf,UAAWH,EAAOoB,MAAK,SAAAL,GAAK,OAAIA,EAAMd,OAASiB,KAAQf,YAI/D,IAAMkB,EAAb,uKAEQ,OACI,kBAACV,EAAD,UAHZ,GAAqCP,IAAMC,W,uBGvB5BiB,MAlBf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOR,OAAK,EAACb,KAAK,KAChB,yBAAKsB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,kBAAC,IAAD,CAAMV,GAAI,QAAV,yBAIN,kBAAC,IAAD,CAAOf,KAAK,QACV,kBAAC,EAAD,SCNY0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.aebde977.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nexport default class FunctionComponent extends React.Component {\r\n    data = {\r\n        name: 'John Doe',\r\n        age: -99\r\n    }\r\n\r\n    render() {\r\n        return <SimpleComponent data={this.data} />\r\n    }\r\n\r\n}\r\n\r\nfunction SimpleComponent(props) {\r\n    return (\r\n        <div>\r\n            <h3>Function Component</h3>\r\n            <p>The simplest way to define a component is to write a JavaScript functio</p>\r\n            <p>\r\n                <span>{props.data.name}</span> is <span>{props.data.age} year(s) old</span>\r\n            </p>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { BrowserRouter as Router, Link, Route, Switch, useRouteMatch, useParams } from \"react-router-dom\";\r\nimport HelloWorldComponent from './HelloWorld/HelloWorldComponent';\r\nimport ArrayoperationsComponent from './ArrayOperations/ArrayOperationsComponent';\r\nimport FunctionComponent from './FunctionComponent/FunctionComponent';\r\nconst routes = [\r\n    {\r\n        path: 'helloworld',\r\n        linkText: 'HelloWorld',\r\n        component: HelloWorldComponent\r\n    },\r\n    {\r\n        path: 'arrayoperation',\r\n        linkText: 'Array Operation',\r\n        component: ArrayoperationsComponent\r\n    },\r\n    {\r\n        path: 'functioncomponent',\r\n        linkText: 'Function Component',\r\n        component: FunctionComponent\r\n    }\r\n]\r\n\r\nfunction MapRouteAndLinks() {\r\n    const { path, url } = useRouteMatch();\r\n    return (\r\n\r\n        <Switch>\r\n            <Route exact path={\"/toc\"}>\r\n                {routes.map(route => <Link key={route.path} to={`${url}/${route.path}`}>{route.linkText}<br /></Link>)}\r\n            </Route>\r\n            <Route path={`${path}/:compId`}>\r\n                <RenderComponent />\r\n            </Route>\r\n\r\n        </Switch>\r\n\r\n    )\r\n}\r\n\r\nfunction RenderComponent() {\r\n    let { compId } = useParams();\r\n    return (\r\n        <Route component={routes.find(route => route.path === compId).component} />\r\n    )\r\n}\r\n\r\nexport class TableOfContents extends React.Component {\r\n    render() {\r\n        return (\r\n            <MapRouteAndLinks />\r\n        )\r\n    }\r\n\r\n}","import React from 'react';\r\n\r\nexport default class HelloWorldComponent extends React.Component {\r\n    render() {\r\n        return (<h1>Hello World</h1>)\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class ArrayoperationsComponent extends React.Component {\r\n    nameList = [\r\n        'Arun Mohan',\r\n        'Dinesh Kumar',\r\n        'Jewel Jacob',\r\n        'Roy M J'\r\n    ]\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>Array Operation</h3>\r\n                <ol>\r\n                    {this.nameList.map((name, index) => <li key={index}>{name}</li>)}\r\n                </ol>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport { BrowserRouter as Router, Link, Route } from \"react-router-dom\";\nimport { TableOfContents } from \"./toc\"\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <Route exact path=\"/\">\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <Link to={\"/toc\"}> Table Of Contents</Link>\n          </header>\n        </div>\n      </Route>\n      <Route path=\"/toc\">\n        <TableOfContents />\n      </Route>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}